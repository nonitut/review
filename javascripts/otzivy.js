document.addEventListener('DOMContentLoaded', function() {
  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  const reviewsList = document.getElementById('reviewsList');
  const reviewForm = document.getElementById('reviewForm');
  const nameInput = document.getElementById('nameInput');
  const reviewInput = document.getElementById('reviewInput');
  const submitBtn = document.getElementById('submitBtn');
  const cancelEdit = document.getElementById('cancelEdit');
  
  let currentEditId = null;

  // –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
  const initialReviews = [
    { 
      id: 'init-1', 
      name: "–ê–Ω–Ω–∞", 
      text: "–ù–æ–Ω–∞, –≤—Å–µ —Å—É–ø–µ—Ä üíî  –°–ø–∞—Å–∏–±–æ –í–∞–º –±–æ–ª—å—à–æ–µ –±–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ —Ä–∞–±–æ—Ç—É! –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ! –ú–Ω–µ –±—ã–ª–æ –±–µ–∑–º–µ—Ä–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å!", 
      date: "01.01.2023" 
    },
    { 
      id: 'init-2', 
      name: "–ò–≤–∞–Ω", 
      text: "–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –ë—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.", 
      date: "02.01.2023" 
    },
    { 
      id: 'init-3', 
      name: "–ú–∞—Ä–∏—è", 
      text: "–ü—Ä–∏—è—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.", 
      date: "03.01.2023" 
    }
  ];

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  function formatDate(dateString) {
    if (!dateString) return '';
    
    let date;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
    if (dateString.includes('-')) {
      // ISO —Ñ–æ—Ä–º–∞—Ç (YYYY-MM-DD)
      date = new Date(dateString);
    } else if (dateString.includes('.')) {
      // –§–æ—Ä–º–∞—Ç DD.MM.YYYY
      const parts = dateString.split('.');
      if (parts.length === 3) {
        date = new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if (!date || isNaN(date.getTime())) {
      return dateString;
    }
    
    // –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
  function loadReviews() {
    let savedReviews = [];
    
    try {
      savedReviews = JSON.parse(localStorage.getItem('reviews')) || [];
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', e);
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
    const allReviews = [...savedReviews, ...initialReviews]
      .map(review => {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!review.date) {
          review.date = new Date().toISOString();
        }
        return review;
      })
      .sort((a, b) => {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const dateA = new Date(a.date.includes('.') ? 
          a.date.split('.').reverse().join('-') : a.date);
        const dateB = new Date(b.date.includes('.') ? 
          b.date.split('.').reverse().join('-') : b.date);
        return dateB - dateA; // –ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞
      });

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    reviewsList.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –≤ DOM
    allReviews.forEach(review => {
      const reviewElement = document.createElement('div');
      reviewElement.className = 'review';
      reviewElement.dataset.id = review.id;
      
      reviewElement.innerHTML = `
        <div class="review-actions">
          ${review.id.startsWith('init') ? '' : `
            <button class="review-btn edit-btn" aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
            <button class="review-btn delete-btn" aria-label="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
          `}
        </div>
        <h4>${escapeHtml(review.name)}</h4>
        <small>${formatDate(review.date)}</small>
        <p>${escapeHtml(review.text)}</p>
      `;
      
      reviewsList.appendChild(reviewElement);
    });

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', deleteReview);
    });

    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', startEditReview);
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
  function deleteReview(e) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) return;
    
    const reviewId = e.target.closest('.review').dataset.id;
    
    try {
      const savedReviews = JSON.parse(localStorage.getItem('reviews')) || [];
      const updatedReviews = savedReviews.filter(review => review.id !== reviewId);
      localStorage.setItem('reviews', JSON.stringify(updatedReviews));
      loadReviews();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤');
    }
  }

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  function startEditReview(e) {
    const reviewId = e.target.closest('.review').dataset.id;
    
    try {
      const savedReviews = JSON.parse(localStorage.getItem('reviews')) || [];
      const reviewToEdit = savedReviews.find(review => review.id === reviewId);

      if (reviewToEdit) {
        currentEditId = reviewId;
        nameInput.value = reviewToEdit.name;
        reviewInput.value = reviewToEdit.text;
        submitBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
        cancelEdit.style.display = 'inline-block';
        nameInput.focus();
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', e);
    }
  }

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  cancelEdit.addEventListener('click', function() {
    reviewForm.reset();
    currentEditId = null;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    cancelEdit.style.display = 'none';
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  reviewForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const name = nameInput.value.trim();
    const text = reviewInput.value.trim();

    if (!name || !text) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    try {
      let reviews = JSON.parse(localStorage.getItem('reviews')) || [];
      
      if (currentEditId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
        reviews = reviews.map(review => 
          review.id === currentEditId 
            ? { ...review, name, text, date: new Date().toISOString() }
            : review
        );
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        reviews.unshift({
          id: Date.now().toString(),
          name,
          text,
          date: new Date().toISOString()
        });
      }
      
      localStorage.setItem('reviews', JSON.stringify(reviews));
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      reviewForm.reset();
      currentEditId = null;
      submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
      cancelEdit.style.display = 'none';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      loadReviews();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤');
    }
  });

  // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }



});